[{"Pseudo":"artragis","Titre":"article1","Contenu":"Donc on ne peut pas faire de système de PR? Même quand il n'y a pas de license qui interdisent la dérivation?","ImageName":null},{"Pseudo":"artragis","Titre":"article2","Contenu":"Ici, on a tout ce qui doit être versionné, le modèle en bdd n'est pas concerné a priori. Je pense qu'il faut vraiment bien séparer les choses de ce point de vue. la ZEP 12 par le de refactorisation la ZEP 8 parle de l'utilisation de git pour versionner et collaborer.","ImageName":null},{"Pseudo":"artragis","Titre":"article3","Contenu":"\n\nla thumnnail n'est pas versionnée au moins grâce au versionnage du manifest.json?\n\nEnsuite versionner les images, pourquoi pas. Mais en soit une nouvelle version d'image = un nouveau lien la plupart du temps donc c'est de manière collatérale déjà versionné.","ImageName":null},{"Pseudo":"artragis","Titre":"article3","Contenu":"\n\nalors, pour être vraiment précis, je vais tenter tant bien que mal de lister ce que \"tout\" veut dire:\nau niveau d'un extrait :\n\n    le contenu\n    les images\n        quand on parle de versionner les images : les liens vers les images ou bien les tableaux de pixels?\n    le titre\n    validé/pas validé\n\nau niveau de la partie/chapitre (ou conteneur si on regarde ZEP 12)\n\n    le titre\n    l'intro\n    la conclusion\n    validé/pas validé\n    l'ordre des enfants (extraits d'un chapitre/chapitre d'une partie)\n\nPour le conteneur général (tuto) :\n\n    le thumbnail\n    les différentes validations\n    l'ordre des enfants\n    la licence\n    le titre\n    l'introduction\n    la conclusion\n\nLes personnes prenant part?\n\n    auteurs\n    validateurs\n\nJ'ai séparé ces deux choses car je ne vois pas l'intérêt de versionner ces choses ni en quoi cela rend le dépôt dépendant de zds. Au contraire, les validateurs, c'est ultra dépendant de zds. De même que l'état \"validé/pas validé\".","ImageName":null},{"Pseudo":"artragis","Titre":"ZEP8","Contenu":"Cette ZEP-8 a pour but de donner les spécifications pour améliorer fortement le système d'édition de tuto zds. Pour obtenir l'état de ce qu'il se fait dans le module de tuto lors de la rédaction de la ZEP, c'est ici.\nPlutôt que de présenter une petite feature pour ce système, elle propose une révision complète de notre manière d'aborder le système de tuto/article en mettant git au centre plutôt que de le voir comme un simple outil pour faire le versioning.\n\nGit est un système de contrôle de version distribué, c'est à dire que chaque personne possède une copie en local du dépôt, peut y faire ses branches etc. puis, une copie sur un ou plusieurs dépôts distant existe et permet à chacun de se synchroniser au besoin.\n\nGit a gagné ses lettres de noblesse grâce à github qui se veut être un \"réseau social du code\". Cette ZEP s'inspire de certaines fonctionnalités de github pour les proposer à ZDS et à son module de rédaction.\nDonner la possibilité de faire une PR\n\nActuellement, malgré l'utilisation de git, nous n'utilisons ce dernier que pour tracer les versions du tutoriel .\n\nLe premier jalon qui permettrait une vraie utilisation de git serait de permettre de faire une pull request.\n\nUne pull request, c'est le fait que quelqu'un -étranger ou non à l'édition du tuto puisse proposer une modification à ce dernier, puis l'auteur verrait cette proposition et irait la fusionner dans son tuto.\n\nUne possibilité basique d'utilisation serait celle-ci :\n\n    sur ZDS l'auteur publie son tuto\n    sur ZDS un visiteur authentifié voit une phrase mal tournée\n    sur ZDS le visiteur authentifié a la possibilité \"d'éditer le tuto\" pour y apporter sa correction\n    sur ZDS le visiteur authentifié appuie sur \"proposer la correction\"\n    sur ZDS l'auteur voit une proposition de correction, s'il l'accepte, la correction est fusionnée à son travail courant, s'il ne l'accepte pas, la branche de correction est fermée.\n\nIci, on ne quitte pas ZDS, c'est donc une fonctionnalité corporate qui s'inscrit dans le désire de voir la communauté participer à la vie du site.\nGestion des branches\n\nQui dit PR dit branches.\nActuellement - et les bug de modification de la prod le prouvent- nous n'avons qu'une branche ce qui crée pas mal de problèmes.\n\n    branche \"publication\" pour les tutoriels en prod.\n        Pour éviter de répéter le bug de prod que l'on a actuellement, plutôt que de stocker un booléen dans la bdd pour dire si c'est en prod, stockons le hash de commit qui a été validé. Comme ça on sait quoi publier.\n        Solution numéro deux : le contenu publié est carrément enregistré en bdd, comme ça on a zéro accès disque et les branches sont vraiment liées à la rédaction plutôt qu'à la publication\n    branche \"beta\" pour la beta test\n        Ne plus utiliser un paramètre avec le \"commit\" pour les beta. Cela cause pas mal de soucis de synchro entre les auteurs et les relecteurs.\n    branche \"boruillon\"(draft) pour la rédaction habituelle\n        Proposition numéro 1 : chaque auteur possède une branche et à chaque fois qu'il est satisfait de sa rédaction, il propose un merge où il pourra - si besoin est- résoudre les conflits avec un merge de ses coauteurs (voir la partie gestion de conflit)\n        Proposition numéro 2 : Chaque correction par un utilisateur lambda enregistré entraîne la création d'une nouvelle branche avec PR dans dev\n\nGestion des conflits\n\nLa gestion des conflits consiste à résoudre les zones de texte qui ont été modifiés simultanément par deux commit/PR.\nActuellement, ce cas se présente lorsqu'un tutoriel est coécrit et que les auteurs modifient le même extrait/intro/conclusion en même temps. La stratégie actuelle est le mine full. La PR 1237 propose de faire du theirs full.\n\nIl serait intéressant donc d'intégrer la commande git mergetool qui vous permet de faire quelque chose de vraiment sympa. Je ne connais pas les détails techniques en python, mais je pense qu'il est tout à fait possible de rediriger une entrée/sortie du shell vers le web. Je ne connais pas la difficulté du truc par contre.\nAutre possibilité : chercher un mergetool déjà possible en interface web.\n\nSi aucun mergetool n'est intégrable dans un délai raisonnable, il faudra coder un mergetool par nous même en quelque sorte.\nOn pourrait s'appuyer sur le POC déjà présent pour faire des diff. Les fonctionnalités ne seront peut être pas complètes mais ça peut marcher.\nLier des dépôts distants\nPrincipe général\n\nGit est un système distribué, il devrait donc être \"simple\" de lier un dépôt distant comme nous pouvons le faire avec la commande git remote add. A partir de là, le cas d'utilisation revient au cas d'utilisation présenté dans \"Créer une PR\" sauf que l'utilisateur authentifié et l'auteur ne font qu'un\n\nCette fonctionnalité permet d'éditer le contenu hors ligne sans pour autant rendre public le dépôt git de zds en écriture avec tous les problèmes de sécurité que cela poserait.\n\nSeul le clone est nécessaire finalement puisque - sauf à revoir de font en comble le backend des tutos- nous avons besoin d'avoir le nom des fichiers avec leur clef primaire (pour les rendre uniques et donc éviter les conflits de fichier).\n\nDe plus cette fonctionnalité laisse à l'auteur le choix de son dépôt distant, que cela soit github, bitbucket ou un autre. Et comme nous n'utilisons que git et non une API particulière, nous restons suffisamment souple pour même accepter un dépôt autohébergé.\n\nUne solution technique possible serait celle-ci :\n\n    un des dépôts représente le tuto en cours de rédaction, il appartient à l'auteur qui peut en faire ce qu'il veut (le clôner, y pousser des changements, etc.) ; l'autre représente le tuto publié sur le site, il appartient aux validos qui peuvent accepter les pull requests des auteurs. Ça simplifie pas mal la gestion des droits, étant donné que les ownerships sont déterminées dépôt par dépôt (et non branche par branche ou tag par tag).\n\nGuilOooo\nLimites acceptables\n\nle dépôt devant être hébergé sur zds, il ne doit pas contenir du contenu autre que :\n\n    des images compatibles pour le web (png, jpg (si possible avec l'encodage mozilla pour limiter la taille)\n    du texte au format markdown\n    un et un seul manifest.json\n\nUne limite de taille doit aussi être imposée afin que l'hébergement ne souffre pas trop.\nGestion de la sécurité\n\nLa gestion des droits pourrait se faire à la github avec des clefs ssh. D'après le commentaires, il faudrait utiliser des outils comme gerrit ou gitolite. ","ImageName":null},{"Pseudo":"artragis","Titre":"coms","Contenu":"Si on voit le fork sous cet angle alors il faut prévoir que l'ancienne adresse (le tuto abandonné) redirige vers la nouvelle.","ImageName":null},{"Pseudo":"artragis","Titre":"base","Contenu":"Oui, mais je ne connais pas tous les choix techniques possibles de base. C'est pour ça que je demande aux gens. J'ai écrit cette ZEP car j'avais quelques idées claires sur plusieurs fonctionnalités, mais ensuite, il semble qu'il y ait pas mal d'alternatives.\nPersonnellement, j'aimerai bien que Natalya explique une méthode simple pour éviter de multiplier les repos.","ImageName":null},{"Pseudo":"artragis","Titre":"ZEP12 unique","Contenu":"ou tout simplement un moyen de dédoublonner. le p_ était un moyen comme un autre, que j'avais trouvé au pif, et puis voilà. Ajouter post-nom un timestamp, un hash etc, why not, mais ça serait uniquement pour notre tambouille interne. En soit, la version en ligne s'en fiche éperdument qu'en interne la page s'appelle shadock_45ab58c9ef.md, ce que le front veut c'est que quand je vais chercher le tutoriel il m'affiche les extraits adéquats.\n\nOr, on remarque que le manifest.json fait déjà le travail de mappage entre le titre (slug, slug+un chiffre, slug+hash, slug+chuck norris) et le nom du fichier. Sans compter que dans le cas précis des extraits, ces derniers ne sont pas accessible par url : seul le conteneur (actuellement tuto/partie/chapitre) l'est. La clef primaire des extraits ne sert à rien. Au pire c'est à nous, dans notre tambouille (puisqu'on se sert des slugs, mais c'est un choix de conception qui peut être changé à la limite) de mettre un _2 à chaque fois qu'on voit un doublon. Pas compliqué à faire, c'est juste un :","ImageName":null},{"Pseudo":"artragis","Titre":"ZEP12 unique","Contenu":"\n\n    Document > Conteneur > Extrait\n\nConteneur ==> section.\n\ncomme on est dans l' édition de contenu textuel, je préfère qu'on prenne le jargon habituel pour ne pas dérouter les gens.\n\na mon sens meta donné ==> stockage dans le manifest.json.\n\npour être BC avec le site actuel, il n'y a rien à mettre en fait. Même si un consensus a demandé à ce que soit mis le thumbnail.\n\npar contre comme ce sont des meta data , il doit être impératif de presupposer qu'elles peuvent ne pas être incluse de base (par exemple pour un import) ou que des meta non utilisées par zds soient ajoutées.","ImageName":null},{"Pseudo":"artragis","Titre":"ZEP12 json","Contenu":"\n\nen fait perso je ne vois pas pourquoi on veut absolument s'entêter avec le hash. Très sérieusement, je vois trois cas d'utilisations :\n\n    je crée le tuto en externe, puis je l'importe sur zds :\n        aucun doublon n'est possible car de base le mec te donnera une liste de fichiers et comme les fichiers sont nécessairement différents les uns des autres, les doublons sont impossibles.\n\n    je crée un tuto en interne l'exporte pour l'éditer hors ligne (voir utilise git comme veut le définir la ZEP 8) puis le réimporter (zds editeur créé par firm1)\n        seul risque de doublon : nommage de deux chapitres de la même manière lors de la création de ces derniers. Mais est-ce souhaitable?\n        changer un titre = le changer dans le manifest, pas forcément dans le fichier\n\n    je crée un tuto en interne et ne l'édite que via zds\n        tout est géré en interne, seul risque de doublon : nommage de deux chapitres de la même manière lors de la création de ces derniers. Mais est-ce souhaitable?\n\nDonc voilà : vous voulez absolument créer des choses ultra complexes (j'ai même vu quelqu'un qui veut absolument respecter les principes ACID) alors que je ne suis pas sûr que les cas d'utilisations qui nécessitent ACID soient les nôtres.\n\nSérieusement : est-ce vraiment possible d'avoir deux extraits de suite qui ont le même titre?\n\nEnfin, actuellement, on stocke l'information du titre des extraits/conteneurs deux fois :\n\n    dans le manifeste :\n    champ title:\"titre\"\n    champ chemin des extraits text:chemin relatif à la racine du tuto\n    dans la convention de nommage\n    nom du fichier = pk_slug.md\n\nOn voit déjà actuellement que comme on stocke la pk et le slug, il y a perte d'info sur le titre.\n\nA mon sens, on doit pouvoir garder libre la manière de nommer le path (à condition que pas d'accent pour pas faire sauter le file system à chaque fois). Puis que de toute façon l'info est stockée dans le manifest.json, on a juste à stocker\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n\n\t\n\n{\n    \"title\": \"3D temps réel avec Irrlicht\", \n    \"description\": \"3D temps réel avec Irrlicht\", \n    \"type\": \"BIG\", \n    \"content\": [\n        {\n            \"type\": \"extrait\", \n            \"title\": \"Introduction\", \n            \"path\": \"introduction.md\"\n         },\n         {\n            \"type\": \"extrait\", \n            \"title\": \"Conclusion\", \n            \"path\": \"conclusion.md\"\n         },\n          {\n               \"title\": \"Une grande section\", \n               \"type\": \"section\",\n               \"path\": \"section1\"   \n               \"content\": [\n                        {\n                            \"title\": \"Introduction\", \n                            \"type\": \"extrait\",\n                            \"path\": \"section1/introduction.md\"\n                        },\n                         {\n                            \"title\": \"un peu de contenu\", \n                            \"type\": \"extrait\",\n                            \"path\": \"section1/contenu.md\"\n                        },  \n\n                    ]\n                }\n\n    ]\n}\n\nmanifest.json big tuto\n\nMon exemple ne vas pas sur trois niveau hiérarchique car c'est trop long à écrire, mais le principe est là.","ImageName":null},{"Pseudo":"artragis","Titre":"ZEP12 intro/ccl","Contenu":"Pour nous les seuls vrais doublons qui puissent exister dans le cas nominal c'est un extrait appelé conclusion ou introduction ou tout titre qui donne comme slug conclusion ou introduction. C'est pourquoi mon premier \"fix\" que j'avais pensé à l'époque c'était que pour ces deux extraits là : si la personne crée un extrait qui s'appelle \"introduction\" ou \"conclusion\", le fichier physique va se nommer p_introduction ou p_conclusion. Et ça marchait pas mal.\n\nHors du cas nominal, i.e les gens qui veulent faire chier le monde à créer sur zds (je le rappelle) deux extraits (ou plus) avec le même nom, dans la même section il suffit de vérifier dans la fonction \"add_extract\" que le fichier n'existe pas. Au cas où il existerait, on renvoie le formulaire en disant \"un extrait possédant ce titre existe déjà\". A mon sens c'est ça la vraie fonctionnalité désirée, pas celle actuelle où tu peux mettre cent extraits avec le même titre.","ImageName":null},{"Pseudo":"artragis","Titre":"ZEP12 intro/ccl special","Contenu":"\n\nNon, je pense qu'il faut rester sur ton modèle Alex-D.\n\nCa sert à rien de faire un extrait \"spécial\" surtout qu'il n'est pas forcément rempli !\n\nLa seule chose qu'il faut gérer ça serait la demande de déplacement d'un conteneur dans un contenur que lui même contient : il faut interdire cela !\nPour la rédaction du contenu, il faut vraiment être très souple quitte à donner des conseils aux auteurs. La validation est aussi faite pour ça.","ImageName":null},{"Pseudo":"artragis","Titre":"ZEP12 je ne suis pas d'accord","Contenu":"\n\nJe ne suis pas en accord avec tout.\nOui l'extrait est le composant \"atomique\".\nMais je trouve très clairement qu'introduire \"partie, chapitre…\" c'est juste finalement nier cela.\n\nJe vois plus une organisation similaire à ce qu'on peut trouver dans les UI (WinForm/Swing) : Deux types de composants : les extraits et les conteneurs.\n\nun conteneur contient une intro,une conclusion et entre deux un ou plusieurs autres composants (donc extraits ou conteneur). Et encore, intro et conclusion ne devrait pas être nécessaires !\n\nPourquoi faire cela?\n\nJ'écris un \"big tuto\" selon la convention actuelle. J'ai une \"partie\" qui s'appelle \"astuces et points particuliers\", aka \"bon je savais pas où en parler mais si j'en parlais pas le tuto n'aurait aucune valeur\".\n\nEn vérité, chaque chapitre est en soit important, mais comme on est \"templaté\" big tuto, je suis obligé de les encapsuler dans une partie. Et comme une partie avec un seul chapitre c'est déstabilisant pour les gens bah on est obligé de rassembler les choses.\n\nEtrangement, déployer un site ASP.NET c'est quand même ultra important et devrait donc mériter d'être de premier niveau dans la hiérarchie. Mais comme déployer un site ASP.NET c'est qu'un chapitre, bah il doit être dans une partie et donc perdre un niveau de hiérarchie.\n\nSi notre but c'est d'avoir un sens et d'être accessibles, il faut réagir en terme de hiérarchie du contenu. Et proposer une souplesse côté technique mais un templating fermé et embêtant côté rédaction et affichage c'est juste contradictoire.","ImageName":null},{"Pseudo":"artragis","Titre":"arduino zds","Contenu":"ça te plairait que je le copie/colle puis que tu relises le tout (bien sûr tu serais mis en auteur, logique)?","ImageName":null},{"Pseudo":"zyhou","Titre":"Mon 1er post","Contenu":"Hey voici mon premier poste","ImageName":null},{"Pseudo":"zyhou","Titre":"2eme post","Contenu":"2eme post","ImageName":null},{"Pseudo":"zyhou","Titre":"test","Contenu":"test","ImageName":""},{"Pseudo":"zyhou","Titre":"Image","Contenu":"Image","ImageName":"windows.png"}]